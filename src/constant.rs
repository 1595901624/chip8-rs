/// Chip8 是单色 64 x 32 像素的显示屏
// 屏幕宽
pub(crate) const SCREEN_WIDTH: usize = 64;
// 屏幕高
pub(crate) const SCREEN_HEIGHT: usize = 32;
// 4KB 内存
pub(crate) const CHIP8_MEMORY: usize = 4096;
/// CHIP-8 程序严格基于十六进制。
///
/// 这意味着 CHIP-8 程序的格式与高级语言的基于文本的格式几乎没有相似之处。
///
/// 每条 CHIP-8 指令的长度为两个字节，并使用四个十六进制数字表示，指令以大端方式存储在内存中。
pub(crate) const INSTRUCTION_LENGTH: usize = 2;

/// 字符集
/// CHIP-8 包含内置字体实用程序，允许使用 DXYN 指令简单地输出字符。
///
/// 所有十六进制数字（0-9，A-F）都有相应的数据已经存储在解释器的内存中。
///
/// 参阅：https://github.com/mattmikolay/chip-8/wiki/Mastering-CHIP%E2%80%908 Drawing Font
pub(crate) const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];